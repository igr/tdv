{# @pebvariable name="reportName" type="java.lang.String" #}
{# @pebvariable name="stats" type="dev.oblac.tdv.analyzer.ThreadDumpAllStats" #}
{# @pebvariable name="tomcat" type="dev.oblac.tdv.analyzer.TomcatAnalysis" #}
{# @pebvariable name="blockTree" type="dev.oblac.tdv.analyzer.BlockTree" #}
{# @pebvariable name="ex" type="dev.oblac.tdv.reporter.BlockExplanation" #}
{# @pebvariable name="explain" type="java.util.List<dev.oblac.tdv.reporter.BlockExplanation>" #}
{% import "./macros.pebble" %}
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Thread Dump Report</title>
    <link href="d3-flamegraph.min.css" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
</head>
<body>
<header>
    <a href="#threads">Threads</a>
    {% if tomcat.stats.totalThreads != 0 %}<a href="#tomcat">Tomcat</a>{% endif %}
    <a href="#daemons">Daemons</a>
    <a href="#gc">GC threads</a>
    <a href="#pools">Pools</a>
    <a href="#blocks">Blocks</a>
    <a href="#flamegraph">Flame Graph</a>
    <a href="#callgraph">Call Graph</a>
    <a href="#exceptions">Exceptions</a>
    <a href="#cpu">CPU consuming</a>
    <a href="#ust">Identical stack trace</a>
    <a href="#missing">Missing locks</a>
    <a href="{{ reportConsoleName }}" class="special">SQL</a>
    <a href="{{ reportThreadsName }}" class="special">ALL</a>
</header>
<main id="content">
    <h1>ThreadDump Report</h1>

    <a id="threads"></a>
    <div class="block">
        <h2>üßµ Threads: {{ stats.all.totalThreads }}</h2>
        <div>
            &nbsp;<a href="#" onclick="return show('threads_all', ['threads_app', 'threads_jvm']);">ALL</a>&nbsp;
            &nbsp;<a href="#" onclick="return show('threads_app', ['threads_all', 'threads_jvm']);">APP</a>&nbsp;
            &nbsp;<a href="#" onclick="return show('threads_jvm', ['threads_app', 'threads_all']);">JVM</a>&nbsp;
        </div>
        <div id="threads_all">
            <h3>ALL threads</h3>
            {{ threadStats(stats.all, "all") }}
        </div>
        <div id="threads_app" style="display: none">
            <h3>Application threads</h3>
            {{ threadStats(stats.app, "app") }}
        </div>
        <div id="threads_jvm" style="display: none">
            <h3>JVM threads</h3>
            {{ threadStats(stats.sys, "sys") }}
        </div>
    </div>

    {% if tomcat.stats.totalThreads != 0 %}
        <a id="tomcat"></a>
        <div class="block">
            <h2>üò∏ Tomcat threads: {{ tomcat.stats.totalThreads }}</h2>
            {{ threadStats(tomcat.stats, "tomcat") }}
        </div>
        <div class="block">
            <h3>Tomcat Executors pool</h3>
            <div class="description">
                Tomcat executor threads are used to process incoming requests.
            </div>
            {{ threadStats(tomcat.tomcatExecutors, "tomcat_exec") }}
        </div>
    {% endif %}

    <a id="daemons"></a>
    <div class="block">
        <h2>üòà Daemons</h2>
        <div class="grid21">
            <div class="boxes">
                <div class="box">
                    <div class="box-title">TOTAL</div>
                    <div class="box-value">{{ stats.all.totalThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">DAEMON</div>
                    <div class="box-value">{{ stats.all.daemonCount }}</div>
                </div>
                <div class="box">
                    <div class="box-title">NON-DAEMON</div>
                    <div class="box-value">{{ stats.all.nonDaemonCount }}</div>
                </div>
            </div>
            <div id="chart_daemons" style="width:400px;height:400px;"></div>
        </div>
    </div>

    <a id="gc"></a>
    <div class="block">
        <h2>üßπ GC Threads: {{ stats.all.gcTotalThreads }}</h2>
        <div class="grid21" style="{{ noneIf(stats.all.gcTotalThreads == 0) }}">
            <div class="boxes">
                <div class="box">
                    <div class="box-title">WORKER</div>
                    <div class="box-value">{{ stats.all.gcWorkerThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">CONCURRENT</div>
                    <div class="box-value">{{ stats.all.gcConcurrentThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">REFINE</div>
                    <div class="box-value">{{ stats.all.gcRefineThreads }}</div>
                </div>
            </div>
            <div id="chart_gc" style="width:400px;height:400px;"></div>
        </div>
    </div>

    <a id="pools"></a>
    <div class="block">
        <h2>üèä‚Äç‚ôÇÔ∏è Thread Pools: {{ pools.size }}</h2>
        <div class="description">
            List of detected thread pools. Thread pool is detected from the thread name,
            by grouping threads with the similar name. May not be exact to the actual thread pools used in the application.
        </div>
        <div class="graph" style="{{ noneIf(pools.size == 0) }}">
            <table class="styled-table">
                <thead>
                <tr>
                    <th>Count</th>
                    <th>Thread Pool</th>
                    <th>runnable</th>
                    <th>blocked</th>
                    <th>waiting</th>
                    <th>timed_waiting</th>
                </tr>
                </thead>
                {% for pool in pools %}
                    <tr>
                        <td><b>{{ pool.count }}</b></td>
                        <td>{{ pool.name }}</td>
                        <td style="text-align: center">{{ pool.runnable }}</td>
                        <td style="text-align: center">{{ pool.blocked }}</td>
                        <td style="text-align: center">{{ pool.waiting }}</td>
                        <td style="text-align: center">{{ pool.timedWaiting }}</td>
                    </tr>
                {% endfor %}
            </table>
        </div>
    </div>

    <a id="blocks"></a>
    <div class="block">
        <h2>üõë Blocks: {{ blockTree.size }}</h2>
        <div class="description">
            List of all blocks in the thread dump, sorted from highest to lowest blocking threads.
            Nodes in the graph represent the method that is blocking other threads.
            Nodes are clickable and will open corresponding thread in the report.
            <b>Attention: if number of blocked thread is high.</b>
        </div>
        {% for blockNode in blockTree %}
            {% set ex = explain.get(loop.index) %}
            <h3>The method <b>{{ ex.className }}.<span class="method">{{ ex.methodName }}</span></b> (line
                #{{ ex.fileLine }}) is blocking {{ ex.blocking }} threads.</h3>
            <p><b>{{ ex.threadName }}</b> thread (<span class="tid">{{ex.threadId}}</span>) is stuck on
                <b>{{ ex.stuckClassName }}.{{ ex.stuckMethodName }}</b> (line #{{ ex.stuckLine }}).<br>
                Before getting stuck, this thread obtained <b>{{ ex.locksCount }}</b> locks and never released it.<br>
                Due to that, <b>{{ ex.blocking }}</b> threads are BLOCKED as shown in the below graph.</p>
            <details>
                <summary>Stacktrace</summary>
                {{ threadStack(ex.stackTrace) }}
            </details>

            <div class="graph">
                <div id="blockTree_{{ loop.index }}"></div>
            </div>
        {% endfor %}
    </div>

    <a id="flamegraph"></a>
    <div class="block">
        <h2>üî• Flamegraph</h2>
        <div class="description">
            Flamegraph of all method calls in the thread dump.
            Indicates how many threads are executing the same method.
            This graph is interactive - you can zoom in and out.
        </div>
        <div class="graph">
            <div id="flamechart"></div>
        </div>
    </div>

    <a id="callgraph"></a>
    <div class="block">
        <h2>‚òéÔ∏è Call Tree</h2>
        <div class="description">
            The tree of all method calls in the thread dump.
            Indicates how many threads are executing the same method.
        </div>
        <div class="graph">
                {{ callgraph | raw }}
        </div>
    </div>

    <a id="exceptions"></a>
    <div class="block">
        <h2>üö® Exceptions: {{ exceptions.size }}</h2>
        <div class="description">
            List of all captured exceptions in the thread dump.
        </div>
        <div class="graph" style="text-align: left; {{ noneIf(exceptions.size == 0) }}">
            <div class="boxes">
                    {% for ed in exceptions %}
                    <div class="box box-wide">
                        <b>{{ ed.threadName }}</b> <span class="tid">{{ ed.threadId }}</span><br>
                        <p class="stacktrace">
                                {% for e in ed.exceptions %}{{ e }}<br>{% endfor %}
                        </p>
                        <a class="toggle" href="#" onclick="return toggleDiv('error_{{ loop.index }}')">stacktrace</a>
                        <div id="error_{{ loop.index }}" style="display: none; position: relative;" class="stacktrace">
                                {% for s in ed.stacktrace %}
                                {% if s containsOneOf ed.exceptions and s containsOneOf ['<init>'] %}
                                    <b>{{ s }}</b><br>
                                    {% else %}
                                    {{ s }}<br>
                                {% endif %}
                                {% endfor %}
                        </div>
                    </div>
                    {% endfor %}
            </div>
        </div>
    </div>

    <a id="cpu"></a>
    <div class="block">
        <h2>üç™ CPU consuming threads</h2>
        <div class="description">
            List ot top 20 threads with high CPU consumption.
            Note that the percentage is not the actual CPU usage -
            it is calculated based on the thread's CPU time and the total CPU time.
        </div>
        <div class="graph" style="text-align: left">
                {% for c in cpuc %}
                <p>
                    [{{ c.percentage | numberformat('#.##') }}%] <b>{{ c.threadName }}</b> <span
                    class="tid">{{ c.threadId }}</span><br>
                </p>
                {% endfor %}
        </div>
    </div>

    <a id="ust"></a>
    <div class="block">
        <h2>ü™ûThreads (10+) with identical stack traces: {{ usts.size }}</h2>
        <div class="description">
            This section lists stack traces that are identical across multiple threads.
        </div>
        <div class="graph" style="{{ noneIf(usts.size == 0) }}">
            <table class="styled-table">
                <thead>
                <tr>
                    <th>Count</th>
                    <th>Stack Trace</th>
                </tr>
                </thead>
                {% for ust in usts %}
                    <tr>
                        <td><b>{{ ust.count }}</b></td>
                        <td class="stacktrace">
                            {{ ust.state }}<br>
                            {% for st in ust.stackTrace %}
                            {{ st }}<br>
                            {% endfor %}
                        </td>
                    </tr>
                {% endfor %}
            </table>
        </div>
    </div>
    <a id="missing"></a>
    <div class="block">
        <h2>üîç Missing locks (10+): {{ missing.size }}</h2>
        <div class="description">
            Sometimes threads are waiting or being parked for the lock that <i>does not</i> exist in the thread dump.
            This section lists such missing locks and the number of locks parked for it (if > 10).
            <b>Attention: if the number of parked locks is high.</b>
        </div>
        <table class="styled-table" style="{{ noneIf(missing.size == 0) }}">
            <thead>
            <tr>
                <th>Missing lock</th>
                <th>Parked waiting for lock</th>
            </tr>
            </thead>
            {% for miss in missing %}
                <tr>
                    <td><b>{{ miss.lock }}</b></td>
                    <td>{{ miss.count }}</td>
                </tr>
            {% endfor %}
        </table>
    </div>
</main>

<footer>üöÄ TDV</footer>
</body>
<script src="d3.v7.min.js"></script>
<script src="canvasjs.min.js"></script>
<script src="charts.js"></script>
<script src="tree.js"></script>
<script type="text/javascript" src="d3-flamegraph.min.js"></script>
<script>
    const daemonsData = [
        {"name": "DAEMON", y:{{ stats.all.daemonCountPercent | numberformat("#.##") }} },
        {"name": "NON-DAEMON", y:{{ stats.all.nonDaemonCountPercent | numberformat("#.##") }} },
    ]
    const gcStats = [
        {name: "Worker", y:{{ stats.all.gcWorkerThreadsPercent | numberformat("#.##") }} },
        {name: "Concurrent", y:{{ stats.all.gcConcurrentThreadsPercent | numberformat("#.##") }} },
        {name: "Refine", y:{{ stats.all.gcRefineThreadsPercent | numberformat("#.##") }} },
    ]

        {% for blockNode in blockTree %}
        const blockTree_{{ loop.index }} = {{ blockNode | json | raw }};
        {% endfor %}

    const flamegraphData = {{ flamegraph | json | raw }};

    window.onload = function () {
        {{ threadStatsPiechart(stats.all, "all") }}
        {{ threadStatsPiechart(stats.app, "app") }}
        {{ threadStatsPiechart(stats.sys, "sys") }}
        {% if tomcat.stats.totalThreads != 0 %}
        {{ threadStatsPiechart(tomcat.stats, "tomcat") }}
        {{ threadStatsPiechart(tomcat.tomcatExecutors, "tomcat_exec") }}
        {% endif %}
        drawThreadsPieChar("chart_daemons", "Daemon vs Non-Daemon %", daemonsData);
        drawThreadsPieChar("chart_gc", "GC threads %", gcStats);

        {% for blockNode in blockTree %}
            const blockTreeChart_{{ loop.index }} = Tree(blockTree_{{ loop.index }}, {
                label: d => d.name,
                title: (d, n) => `${n.data.popup}`, // hover text
                link: d => `{{ reportThreadsName }}#tid_${d.popup}`,
                // linkTarget: "_self",
                r: 8,
                fontSize: 14,
                deltaX: 30,
                fill: "red",
                width: 1200
            })
            document.getElementById("blockTree_{{ loop.index }}").appendChild(blockTreeChart_{{ loop.index }});
        {% endfor %}

        const chart = flamegraph().width(1200);
        d3.select("#flamechart")
            .datum(flamegraphData)
            .call(chart);
    };

    function show(showId, hideIds) {
        document.getElementById(showId).style.display = "block";
        hideIds.forEach(function (id) {
            document.getElementById(id).style.display = "none";
        });
        return false;
    }

    function toggleDiv(id) {
        const element = document.getElementById(id);
        if (element.style.display === "none") {
            element.style.display = "block";
        } else {
            element.style.display = "none";
        }
        return false;
    }
</script>
</html>
