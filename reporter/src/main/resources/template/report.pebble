{# @pebvariable name="td" type="dev.oblac.tdv.domain.ThreadDump" #}
{# @pebvariable name="stats" type="dev.oblac.tdv.analyzer.ThreadDumpStats" #}
{# @pebvariable name="blockTree" type="dev.oblac.tdv.analyzer.BlockTree" #}
{# @pebvariable name="ex" type="dev.oblac.tdv.reporter.BlockExplanation" #}
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>Thread Dump : {{ td.date }}</title>
    <link href="d3-flamegraph.min.css" rel="stylesheet">
    <link rel="stylesheet" href="style.css">
</head>
<body>
<header>
    <a href="#threads">Threads</a>
    <a href="#daemons">Daemons</a>
    <a href="#gc">GC threads</a>
    <a href="#blocks">Blocks</a>
    <a href="#flamegraph">Flame Graph</a>
    <a href="#callgraph">Call Graph</a>
    <a href="#exceptions">Exceptions</a>
    <a href="#cpu">CPU consuming</a>
    <a href="#ust">Identical stack trace</a>
</header>
<main id="content">
    <h1>{{ td.date }}</h1>
    <div>{{ td.name }}</div>

    <a id="threads"></a>
    <div class="block">
        <h2>üßµ Threads</h2>
        <div class="grid21">
            <div class="boxes">
                <div class="box">
                    <div class="box-title">TOTAL</div>
                    <div class="box-value">{{ stats.totalThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">TERMINATED</div>
                    <div class="box-value">{{ stats.terminatedThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">RUNNABLE</div>
                    <div class="box-value">{{ stats.runnableThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">BLOCKED</div>
                    <div class="box-value">{{ stats.blockedThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">TIMED_WAITING</div>
                    <div class="box-value">{{ stats.timedWaitingThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">WAITING</div>
                    <div class="box-value">{{ stats.waitingThreads }}</div>
                </div>
            </div>
            <div id="chart_threads" style="width:600px;height:500px;"></div>
        </div>
    </div>

    <a id="daemons"></a>
    <div class="block">
        <h2>üòà Daemons</h2>
        <div class="grid21">
            <div class="boxes">
                <div class="box">
                    <div class="box-title">TOTAL</div>
                    <div class="box-value">{{ stats.totalThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">DAEMON</div>
                    <div class="box-value">{{ stats.daemonCount }}</div>
                </div>
                <div class="box">
                    <div class="box-title">NON-DAEMON</div>
                    <div class="box-value">{{ stats.nonDaemonCount }}</div>
                </div>
            </div>
            <div id="chart_daemons" style="width:400px;height:400px;"></div>
        </div>
    </div>

    <a id="gc"></a>
    <div class="block">
        <h2>üßπ GC Threads: {{ stats.gcTotalThreads }}</h2>
        <div class="grid21">
            <div class="boxes">
                <div class="box">
                    <div class="box-title">WORKER</div>
                    <div class="box-value">{{ stats.gcWorkerThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">CONCURRENT</div>
                    <div class="box-value">{{ stats.gcConcurrentThreads }}</div>
                </div>
                <div class="box">
                    <div class="box-title">REFINE</div>
                    <div class="box-value">{{ stats.gcRefineThreads }}</div>
                </div>
            </div>
            <div id="chart_gc" style="width:400px;height:400px;"></div>
        </div>
    </div>

    <a id="blocks"></a>
    <div class="block">
        <h2>üõë Blocks</h2>
        {% for blockNode in blockTree %}
            {% set ex = explain.get(loop.index) %}
            <h3>The method <b>{{ ex.className }}.<span class="method">{{ ex.methodName }}</span></b> (line #{{ ex.fileLine }}) is blocking <b>{{ ex.blocking }}</b> threads.</h3>
            <p><b>{{ ex.threadName }}</b> thread is stuck on <b>{{ ex.stuckClassName }}.{{ ex.stuckMethodName }}</b> (line #{{ ex.stuckLine }}).<br>
                Before getting stuck, this thread obtained <b>{{ ex.locksCount }}</b> locks and never released it.<br>
                Due to that, <b>{{ ex.blocking }}</b> threads are BLOCKED as shown in the below graph.</p>
        <div class="graph">
            <div id="blockTree_{{ loop.index }}"></div>
        </div>
        {% endfor %}
    </div>

    <a id="flamegraph"></a>
    <div class="block">
        <h2>üî• Flamegraph</h2>
        <div class="graph">
            <div id="flamechart"></div>
        </div>
    </div>

    <a id="callgraph"></a>
    <div class="block">
        <h2>‚òéÔ∏è Call Tree</h2>
        <div class="graph">
        {{ callgraph | raw }}
        </div>
    </div>

    <a id="exceptions"></a>
    <div class="block">
        <h2>üö® Exceptions</h2>
        <div class="graph" style="text-align: left">
            <div class="boxes">
        {% for ed in exceptions %}
            <div class="box box-wide">
                <b>{{ ed.threadName }}</b> <span class="tid">{{ ed.threadId }}</span><br>
                <p class="stacktrace">
                {% for e in ed.exceptions %}{{ e }}<br>{% endfor %}
                </p>
                <a class="toggle" href="#" onclick="return toggleDiv('error_{{ loop.index }}')">stacktrace</a>
                <div id="error_{{ loop.index }}" style="display: none; position: relative;" class="stacktrace">
                        {% for s in ed.stacktrace %}
                        {% if s containsOneOf ed.exceptions and s containsOneOf ['<init>'] %}
                            <b>{{ s }}</b><br>
                            {% else %}
                            {{ s }}<br>
                        {% endif %}
                        {% endfor %}
                </div>
            </div>
        {% endfor %}
            </div>
        </div>
    </div>

    <a id="cpu"></a>
    <div class="block">
        <h2>üç™ CPU consuming threads</h2>
        <div class="graph" style="text-align: left">
        {% for c in cpuc %}
        <p>
            [{{ c.percentage | numberformat('#.##') }}%] <b>{{ c.threadName }}</b> <span class="tid">{{ c.threadId }}</span><br>
        </p>
        {% endfor %}
        </div>
    </div>

    <a id="ust"></a>
    <div class="block">
        <h2>ü™ûThreads with identical stack trace (top 10)</h2>
        <div class="graph">
            <table class="styled-table">
            <thead>
            <tr>
                <th>Thread</th>
                <th>Count</th>
                <th>Stack Trace</th>
            </tr>
            </thead>
            {% for ust in usts %}
            <tr>
                <td>{{ ust.name }}<br><span class="tid">{{ ust.tid }}</span></td>
                <td>{{ ust.count }}</td>
                <td class="stacktrace">
                    {{ ust.state }}<br>
                    {% for st in ust.stackTrace %}
                    {{ st }}<br>
                    {% endfor %}
                </td>
            </tr>
            {% endfor %}
            </table>
        </div>
    </div>
</main>

<footer>üöÄ TDV</footer>
</body>
<script src="d3.v7.min.js"></script>
<script src="canvasjs.min.js"></script>
<script src="charts.js"></script>
<script src="tree.js"></script>
<script type="text/javascript" src="d3-flamegraph.min.js"></script>
<script>
    const threadsData = [
        {"name": "TERMINATED", y:{{ stats.terminatedThreadsPercent | numberformat("#.##") }} },
        {"name": "BLOCKED", y:{{ stats.blockedThreadsPercent | numberformat("#.##") }} },
        {"name": "WAITING", y:{{ stats.waitingThreadsPercent | numberformat("#.##") }} },
        {"name": "RUNNABLE", y:{{ stats.runnableThreadsPercent | numberformat("#.##") }} },
        {"name": "TIMED_WAITING", y:{{ stats.timedWaitingThreadsPercent | numberformat("#.##") }} },
    ];
    const daemonsData = [
        {"name": "DAEMON", y:{{ stats.daemonCountPercent | numberformat("#.##") }} },
        {"name": "NON-DAEMON", y:{{ stats.nonDaemonCountPercent | numberformat("#.##") }} },
    ]
    const gcStats = [
        { label: "Worker", y:{{ stats.gcWorkerThreadsPercent | numberformat("#.##") }} },
        { label: "Concurrent", y:{{ stats.gcConcurrentThreadsPercent | numberformat("#.##") }} },
        { label: "Refine", y:{{ stats.gcRefineThreadsPercent | numberformat("#.##") }} },
    ]

    {% for blockNode in blockTree %}
    const blockTree_{{ loop.index }} = {{ blockNode | json | raw }};
    {% endfor %}

    const flamegraphData = {{ flamegraph | json | raw }};

    window.onload = function () {
        drawThreadsPieChar("chart_threads", "Thread state %", threadsData);
        drawThreadsPieChar("chart_daemons", "Daemon vs Non-Daemon %", daemonsData);
        drawThreadsPieChar("chart_gc", "GC threads %", gcStats);

        {% for blockNode in blockTree %}
        const blockTreeChart_{{ loop.index }} = Tree(blockTree_{{ loop.index }}, {
            label: d => d.name,
            title: (d, n) => `${n.data.popup}`, // hover text
            r: 8,
            fontSize: 14,
            deltaX: 30,
            fill: "red",
            width: 1200
        })
        document.getElementById("blockTree_{{ loop.index }}").appendChild(blockTreeChart_{{ loop.index }});
        {% endfor %}

        const chart = flamegraph().width(1200);
        d3.select("#flamechart")
            .datum(flamegraphData)
            .call(chart);
    };
    function toggleDiv(id) {
        const element = document.getElementById(id);
        if (element.style.display === "none") {
            element.style.display = "block";
        } else {
            element.style.display = "none";
        }
        return false;
    }
</script>
</html>
